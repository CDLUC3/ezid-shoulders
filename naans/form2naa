#!/usr/bin/perl

# xxx add ability to specify NAAN in form, and not generate NAAN, but
#     still send the email
# xxx enforce acronym uniqueness

use 5.010;
use strict;
use warnings;

use Text::ParseWords;
use YAML;
use Encode;

# Author:  John A. Kunze, jak@ucop.edu, California Digital Library
# Copyright (c) 2016-2017 UC Regents

my $cmd = $0;
$cmd =~ s,.*/,,;		# drop path part
my $usage_text = << 'EOT';
q|$cmd - convert a NAAN request form to a registry entry

Usage:	$cmd [ -n ] FormFile

where FormFile contains form data in either YAML-ish or CSV format. The
data may have been created with https://goo.gl/forms/bmckLSPpbzpZ5dix1 
and delivered either by downloading a CSV file or pasting from an email
generated from the filled-out form.

The FormFile may be given as '-' to name stdin. The optional -n argument
("no execute") prevents generation of a new NAAN, but does show the rest
of the entry as it would look except for a new NAAN.  As an example, the
received form

  Contact name:	Gautier Poupeau
  Contact email address:	gpoupeau@ina.fr
  Organization name:	Institut national de l'audiovisuel
  Position in organization:	Data architect
  Organization address:	4 avenue de l'Europe, 94366 Bry-sur-Marne Cedex
  Organization base URL:	http://www.ina.fr
  Organization status:	For profit
  Service provider:	Sam Smith, ss@aaa.example.org, Acme Archiving

with -n specified produces

  naa:
  who:    Institut national de l'audiovisuel (=) INA
  what:   XXXXX
  when:   2016.09.23
  where:  http://www.ina.fr
  how:    FP | (:unkn) unknown | 2016 |
  !why:   ARK
  !contact: Poupeau, Gautier ||| gpoupeau@ina.fr |
  !address: 4 avenue de l'Europe, 94366 Bry-sur-Marne Cedex
  !provider: Sam Smith, ss@aaa.example.org, Acme Archiving

EOT

=for incorporation

#!/bin/tcsh -f

set notify = (jak@ucop.edu)

set acro = "$1"
set website = "$2"
#set institution = ($3 $4 $5 $6 $7 $8 $9)
set institution = "$3"
set first = "$4"
set last = "$5"
set email = "$6"
set phone = "$7"
set address = "$8"

set mint = "nog -d ~/minters/n2t/naans mint 1"

set url = `echo $website | sed 's,//*$,,'`		# remove terminal '/'
set url = `echo $url | sed 's,^\([^h]\),http://\1,'`	# start with 'http://'

# XXXX add ability to 'hold' a user-supplied NAAN

# remove initial 's: '
set id = `$mint | sed -e 's,^s: ,,' -e 's,^id: ,,'`
#set partial = `echo $id | sed 's,^00001/,,'`

# Critical test to see if the NAAN exists, eg, created by processes used
# for deriving NAANs from DOI Prefixes.
# XXX add warning if enough words in institutional name match an existing entry
set exists = `bash -c "naan exists $id" && echo 1`	# naan is a perl script
if ("$exists" == 1) then
	echo "NAAN $id exists -- skipping.  Try again."
	exit 1
endif

# Criteria go here.
if ("$id" =~ [089]*) then	# 8 too, often used for EZID DOI+ARK accounts
	echo "Skipping id: $id".  Try again.
	exit 1
endif

echo Got id = $id
set date = "`date +%Y.%m.%d`"
set year = "`date +%Y`"

if ("$first" == "")   set first = First
if ("$last" == "")    set last = Last
if ("$email" == "")   set email = Email
if ("$phone" == "")   set phone = ""
if ("$address" == "")   set address = ""

echo "Append this line to the 'grandfathered' file:"
printf "${id}: %-9s $date   # $institution\n" $acro

echo
echo "Finally, do"
echo "  admegn validate_naans &&"
echo "    (cd ~n2t/shoulders/naans; make diffs.txt all announce)"

echo "\
naa:\
who:	$institution (=) $acro\
what:	$id\
when:	$date\
where:	$url\
how:	NP | (:unkn) unknown | $year |\
\!why:	ARK\
\!contact: $last, $first ||| $email | $phone\
\!address: $address\
\
" > new_naa
cat new_naa >> recent_naas

echo "Response template being sent to $notify."

#mail -s 'naan response' $notify < new_naa_response
(echo "Subject: NAAN request: $acro"; \
 echo "Content-type: text/plain; charset=UTF-8"; \
 echo ""; \
 cat new_naa_response ) | sendmail $notify

echo "\
Modify contents of file 'new_naa' to insert into the master_naans registry.\
Modify 'new_naa_response' (emailed to $notify) to respond to the requester."

=cut 

# main
{
	#binmode(STDOUT, ":utf8");
	use open qw/:std :utf8/;
	my $no_exec = 0;
	$#ARGV < 0 and
		print($usage_text),
		exit 0;
	$ARGV[0] eq '-n' and
		$no_exec = 1,
		shift;
	$ARGV[0] eq '-' and
		shift;
	$ARGV[0] =~ /^-/ and
		print("Unknown option: $ARGV[0]\n"),
		print($usage_text),
		exit 1;

	# Get parts of today's date
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
	$year += 1900;
	$mon = sprintf("%02d", $mon + 1);
	$mday = sprintf("%02d", $mday);

	local $/;		# set input mode to slurp whole file at once
	$_ = <>;		# slurp entire file from stdin or named arg
	s/(:?)\t+/: /g and	# YAML needs : and forbids tab-for-space, and
		# as long as we're not doing CSV fields, elide \n in front of
		s/\n([^:]*)$/ $1/m and	# lines with no colon (a contin. line),
		s/$/\n/;		# but make sure whole thing ends in \n

	# Flag annoying non-ascii punctuation (eg, ' and -)
	my @uchars = split '', decode('utf8', $_);
	/\P{ascii}/ && /\p{Punctuation}/ && print(STDERR
		"warning: non-ascii punctuation: ", encode('utf8', $_), "\n")
			for (@uchars);

	# CSV fields:
	# "Timestamp","Contact name:","Contact email address:","Organization name:","Position in organization:","Organization address:","Organization base URL:","Organization status:","Service provider:","Organization acronym preferred:","Other information:"
	my $timestamp;			# unused field if it's a CSV parse
	my $h;				# hash if it's a YAML parse
	my ($fullname, $email, $orgname, $role, $address,
		$URL, $ostatus, $provider, $acronym, $other);
	my ($firstname, $lastname);
	# xxx very flawed test -- do real csv parse instead
	if (m/,.*,.*,.*,.*,/) {	# if there are at least 5 commas on a line
		(			# assume input is in CSV-format
			$timestamp,			# unused field
			$fullname, $email, $orgname, $role, $address,
				$URL, $ostatus, $provider, $acronym, $other
		) = Text::ParseWords::parse_line(',', 0, $_);
		# xxx should limit to number of fields, eg, in face of
		# texty "Other info"
	}
	else {
		$h = Load($_);		# YAML parse, returning hash reference
		$fullname = $h->{'Contact name'} || '';
		$orgname = $h->{'Organization name'} || '';
		$acronym = $h->{'Organization acronym preferred'} || '';
		$ostatus = $h->{'Organization status'} || '';
		$URL = $h->{'Organization base URL'};
		$email = $h->{'Contact email address'};
		$address = $h->{'Organization address'};
		$provider = $h->{'Service provider'} || '';
		$role = $h->{'Position in organization'} || '';
		$other = $h->{'Other information'} || '';
	}
	# yyy check if YAML strips surrounding whitespace

	# Get part of personal name (just a guess, so bears checking)
	($firstname, $lastname) = $fullname =~ /^\s*(.+)\s+(\S+)\s*$/ or
		print(STDERR "error: couldn't parse personal name '",
			$fullname, "'\n"),
		exit 1;
	unless ($acronym) {
		$acronym = $orgname;
		# drop stop words in English, French, and Spanish
		$acronym =~ s/\b(?:the|and|of|l[ae']|et|d[eu']|des)\b//g;
		# stop possessive 's' from showing up in the acronym
		# XXX bug: non-ascii being mistaken for word boundaries?
		#     eg, who:    Euro France MÃ©dias (=) EFM?D
		$acronym =~ s/\b's\b//g;
		$acronym =~ s/\b(.).*?\b/\U$1/g;	# first letter
		$acronym =~ s/\s+//g;			# remove spaces
	}
	$acronym = uc $acronym;
	my $bmodel =
		($ostatus eq 'For profit' ? 'FP' :
		($ostatus eq 'Not-for-profit' ? 'NP' :
			"ORGSTATUS: $ostatus"));
	$URL =~ s,[./]+\s*$,,;		# remove terminal / or . if any
	$URL =~ m,^https?://, or
		$URL = 'http://' . $URL;	# clothe a naked hostname
	$provider and
		$provider = "\n!provider: $provider";
	$other =~ /./ and		# if it has real content
		print STDERR "Note other info: |$other|\n";

	# generated field
	my $naan = 'XXXXX';
	# XXX to email response, include raw form info as original request
	# xxx make sure $role doesn't end up in email
	# xxx add email address to emailed response, plus note to cc joan
	# xxx plus adjust subject line
	unless ($no_exec) {
		my $naan_rec = "$ENV{HOME}/shoulders/naans/forge/naan_rec ";
		my $cmd = qq@$naan_rec "$acronym" "$URL" "$orgname" "$firstname ($role)" "$lastname" "$email" "" "$address"@;
		$naan = `$cmd`;
		chop $naan;
		#$naan = forge/naan_rec Acronym Website InstitutionName First Last Email Phone Address
	}

	print "
naa:
who:    $orgname (=) $acronym
what:   $naan
xxx don't trust the FP/NP status in new_naa
when:   $year.$mon.$mday
where:  $URL
how:    $bmodel | (:unkn) unknown | $year |
!why:   ARK
!contact: $lastname, $firstname ($role) ||| $email |
!address: $address$provider

";

my $institution = $orgname;
$institution =~ s/ \(=\).*//;	# if has secondary name reduce to primary name
#Subject: NAAN request for $acronym

my $pseudonaan = $naan;		# xxx lots of garbage in there
$naan =~ s/Got id = (\d+).*/$1/s;		# xxx new change not tested!


$no_exec and
	exit 0;			# nothing left to do

#open OUT, ">", "new_naa_response" or
#	die("couldn't open new_naa_response file");
open OUT, "|mail -s 'NAAN request for $acronym' jakkbl\@gmail.com" or
	die("couldn't open pipe to email response");

# XXX when/if this text is converted to hypertext, use this link for
# the ezid.cdlib.org homepage http://bit.ly/1Q5dKH0
# ask joan

print OUT << "EOT";

NEW TRIAL: intended for $email
CC: ezid\@ucop.edu

Hi $firstname,

Thanks for your request. The NAAN,

	$naan

has been registered for the $institution and you may begin using it immediately.

Please note that $naan is intended for assigning ARKs to content that your institution directly curates or creates. In case you work with other institutions that use your tools and services for content that they curate or create, those institutions should obtain their own NAANs.

In thinking about how to manage the namespace, you may find it helpful to consider the usual practice of partitioning it with reserved prefixes of, say 1-5 characters, eg, names of the form "ark:/$naan/xt3...." for each "sub-publisher" in an organization. Opaque prefixes that only have meaning to information professionals are often a good idea and have precedent in schemes such as ISBN and ISSN.

The ARK specification linked from [1] is currently the best guide for how to create URLs that comply with ARK rules, although it is fairly technical. There is a public discussion group for ARKs (Archival Resource Keys) at

         https://groups.google.com/group/arks-forum

intended for people interested in sharing with and learning from others about how ARKs have been or could be used in identifier applications. The best open source software for setting up your own ARK service implementation is currently Noid, available from cpan.org.

There is also a service called EZID (https://ezid.cdlib.org) that you can use to manage your namespace, which includes minting and resolving ARKs, DOIs, and other identifiers, as well as maintaining metadata. Please contact ezid\@ucop.edu if you are interested in EZID.

There's nothing else you need to do right now. As you may know, we're hoping to craft a small number of standardized statements for name assigning authority policy that organizations can use if they want to.

-John

[1] https://wiki.ucop.edu/display/Curation/ARK

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
John A. Kunze            jak\@ucop.edu      California Digital Library
415 20th St, #406       +1 510 987 9231     University of California
Oakland, CA  94612          \@jakkbl          Office of the President
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

EOT
	close OUT;
	exit 0;
}

__END__


########

#  Your Name:	Gautier Poupeau
#  Contact email address:	gpoupeau@ina.fr
#  Organization name:	Institut national de l'audiovisuel
#  Position in organization:	Data architect
#  Organization address:	4 avenue de l'Europe, 94366 Bry-sur-Marne Cedex
#  Organization base URL:	http://www.ina.fr
#  Organization status:	For profit

#+how:   NP | (:unkn) unknown | 2016 |
#+!why:  EZID ARK-only
#+!contact: Flynn, Allen ||| ajflynn@med.umich.edu | +1 734-615-0839
#+!address: 300 North Ingalls Street, 11th Floor, Suite 1161
